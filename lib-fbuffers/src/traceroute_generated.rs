// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

pub enum RouteOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Route<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Route<'a> {
    type Inner = Route<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Route<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Route {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RouteArgs<'args>) -> flatbuffers::WIPOffset<Route<'bldr>> {
      let mut builder = RouteBuilder::new(_fbb);
      if let Some(x) = args.hops { builder.add_hops(x); }
      if let Some(x) = args.dst { builder.add_dst(x); }
      if let Some(x) = args.src { builder.add_src(x); }
      builder.add_route_id(args.route_id);
      builder.add_max_ttl(args.max_ttl);
      builder.finish()
    }

    pub const VT_ROUTE_ID: flatbuffers::VOffsetT = 4;
    pub const VT_SRC: flatbuffers::VOffsetT = 6;
    pub const VT_DST: flatbuffers::VOffsetT = 8;
    pub const VT_MAX_TTL: flatbuffers::VOffsetT = 10;
    pub const VT_HOPS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn route_id(&self) -> u16 {
    self._tab.get::<u16>(Route::VT_ROUTE_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn src(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Route::VT_SRC, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn dst(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Route::VT_DST, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn max_ttl(&self) -> u8 {
    self._tab.get::<u8>(Route::VT_MAX_TTL, Some(0)).unwrap()
  }
  #[inline]
  pub fn hops(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Hop<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Hop<'a>>>>>(Route::VT_HOPS, None)
  }
}

pub struct RouteArgs<'a> {
    pub route_id: u16,
    pub src: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub dst: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub max_ttl: u8,
    pub hops: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Hop<'a >>>>>,
}
impl<'a> Default for RouteArgs<'a> {
    #[inline]
    fn default() -> Self {
        RouteArgs {
            route_id: 0,
            src: None,
            dst: None,
            max_ttl: 0,
            hops: None,
        }
    }
}
pub struct RouteBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RouteBuilder<'a, 'b> {
  #[inline]
  pub fn add_route_id(&mut self, route_id: u16) {
    self.fbb_.push_slot::<u16>(Route::VT_ROUTE_ID, route_id, 0);
  }
  #[inline]
  pub fn add_src(&mut self, src: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Route::VT_SRC, src);
  }
  #[inline]
  pub fn add_dst(&mut self, dst: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Route::VT_DST, dst);
  }
  #[inline]
  pub fn add_max_ttl(&mut self, max_ttl: u8) {
    self.fbb_.push_slot::<u8>(Route::VT_MAX_TTL, max_ttl, 0);
  }
  #[inline]
  pub fn add_hops(&mut self, hops: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Hop<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Route::VT_HOPS, hops);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RouteBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RouteBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Route<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum HopOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Hop<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Hop<'a> {
    type Inner = Hop<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Hop<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Hop {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HopArgs<'args>) -> flatbuffers::WIPOffset<Hop<'bldr>> {
      let mut builder = HopBuilder::new(_fbb);
      builder.add_rtt(args.rtt);
      if let Some(x) = args.hop { builder.add_hop(x); }
      builder.add_ttl(args.ttl);
      builder.finish()
    }

    pub const VT_HOP: flatbuffers::VOffsetT = 4;
    pub const VT_TTL: flatbuffers::VOffsetT = 6;
    pub const VT_RTT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn hop(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Hop::VT_HOP, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn ttl(&self) -> u8 {
    self._tab.get::<u8>(Hop::VT_TTL, Some(0)).unwrap()
  }
  #[inline]
  pub fn rtt(&self) -> u32 {
    self._tab.get::<u32>(Hop::VT_RTT, Some(0)).unwrap()
  }
}

pub struct HopArgs<'a> {
    pub hop: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub ttl: u8,
    pub rtt: u32,
}
impl<'a> Default for HopArgs<'a> {
    #[inline]
    fn default() -> Self {
        HopArgs {
            hop: None,
            ttl: 0,
            rtt: 0,
        }
    }
}
pub struct HopBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HopBuilder<'a, 'b> {
  #[inline]
  pub fn add_hop(&mut self, hop: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Hop::VT_HOP, hop);
  }
  #[inline]
  pub fn add_ttl(&mut self, ttl: u8) {
    self.fbb_.push_slot::<u8>(Hop::VT_TTL, ttl, 0);
  }
  #[inline]
  pub fn add_rtt(&mut self, rtt: u32) {
    self.fbb_.push_slot::<u32>(Hop::VT_RTT, rtt, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HopBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HopBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Hop<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_route<'a>(buf: &'a [u8]) -> Route<'a> {
  flatbuffers::get_root::<Route<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_route<'a>(buf: &'a [u8]) -> Route<'a> {
  flatbuffers::get_size_prefixed_root::<Route<'a>>(buf)
}

#[inline]
pub fn finish_route_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Route<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_route_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Route<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
